<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" />
    <property name="LOG_PATH" value="./logs"/>

    <!-- Console Appender: 로그를 콘솔에 출력하기 위한 설정 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 로그 출력 형식을 지정
                 %d: 날짜시간
                 %thread: 스레드 이름
                 %-5level: 로그 레벨
                 %logger{36}: 로거 이름(최대 36자)
                 %msg: 로그 메시지
                 %n: 줄바꿈 -->
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36}
                [traceId:%X{traceId}] [spanId:%X{spanId}] [timestamp:%X{timestamp}] [userId:%X{userId}]
                [uri:%X{uri}] [method:%X{method}] [ip:%X{clientIp}] [agent:%X{userAgent}]
                - %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- File Appender: 로그를 파일에 저장하기 위한 설정 -->
    <appender name="TEXT_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/text/client-requests.log</file>
        <!-- 로그 파일 롤링 정책을 설정 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 날짜별로 로그 파일을 생성 -->
            <fileNamePattern>${LOG_PATH}/text/client-requests.%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 최대 30일간의 로그 파일을 보관 -->
            <maxHistory>30</maxHistory>
            <!-- 전체 로그 파일 크기를 최대 3GB로 제한 -->
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <!-- 엑셀 저장용으로 완전한 Key-Value 나열 or 구분자 기반 구조 사용 -->
            <pattern>
                timestamp=%X{timestamp}, traceId=%X{traceId}, spanId=%X{spanId}, userId=%X{userId},
                uri=%X{uri}, method=%X{method}, clientIp=%X{clientIp}, userAgent=%X{userAgent},
                level=%level, logger=%logger{36}, thread=%thread, message=%msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- JSON File Appender: 분석용 (ELK 연동) -->
    <appender name="JSON_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/json/app-log.json</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 테스트용 분단위 기록 -->
            <!--<fileNamePattern>${LOG_PATH}/json/app-log.%d{yyyy-MM-dd_HH-mm}.json</fileNamePattern>-->
            <fileNamePattern>${LOG_PATH}/json/app-log.%d{yyyy-MM-dd}.json</fileNamePattern>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <timestamp />
                <logLevel />
                <loggerName />
                <threadName />
                <message />
                <mdc />
                <stackTrace />
            </providers>
        </encoder>
    </appender>

    <!-- KafkaAppender -->
    <appender name="KAFKA_JSON" class="com.github.danielwegener.logback.kafka.KafkaAppender">
        <topic>app-logs</topic>
        <encoder class="com.github.danielwegener.logback.kafka.encoding.LayoutKafkaMessageEncoder">
            <layout class="net.logstash.logback.layout.LogstashLayout"/>
        </encoder>
        <producerConfig>bootstrap.servers=kafka:9092</producerConfig>
        <producerConfig>acks=1</producerConfig>
        <producerConfig>retries=3</producerConfig>
        <producerConfig>linger.ms=50</producerConfig>
        <producerConfig>batch.size=16384</producerConfig>
        <producerConfig>max.block.ms=30000</producerConfig>
        <producerConfig>security.protocol=PLAINTEXT</producerConfig>
    </appender>

    <!-- heartbeat 전용 로그만 DEBUG 레벨 적용 -->
    <logger name="heartbeatLogger" level="DEBUG" additivity="false">
        <appender-ref ref="TEXT_FILE"/>
        <appender-ref ref="JSON_FILE"/>
    </logger>

    <!-- Root Logger: 전체 로그 레벨과 사용할 Appender를 지정 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="TEXT_FILE"/>
        <appender-ref ref="JSON_FILE"/>
    </root>

</configuration>